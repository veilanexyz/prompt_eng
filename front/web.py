from openai import OpenAI
import streamlit as st
import os
from dotenv import load_dotenv
from st_pages import Page, show_pages

load_dotenv()  # take environment variables from .env.
show_pages( #–æ–Ω–∏ –æ–±–Ω–æ–≤–∏–ª–∏, –Ω–∞–¥–æ –∏–Ω–∞—á–µ –ø–∏—Å–∞—Ç—å
    [
        Page("web.py", "–ì–ª–∞–≤–Ω–∞—è", "üè†"),
        Page("pages/help_class.py", "–ü–æ–∏—Å–∫ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏", "üñºÔ∏è"),
        Page("pages/text2place.py", "–ü–æ–∏—Å–∫ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ —Ç–µ–∫—Å—Ç—É", icon="üîé"),
        Page("pages/calibr.py", "–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞", icon="üåé")
    ]
)
# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã –¥–ª—è –≤–≤–æ–¥–∞ cloud_id
def show_input_form():
    st.write("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à cloud_id:")
    cloud_id = st.text_input("Cloud ID")

    if st.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å"):
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ cloud_id –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        os.environ['CLOUD_ID'] = cloud_id
        st.success("Cloud ID —Å–æ—Ö—Ä–∞–Ω–µ–Ω. –ü–µ—Ä–µ—Ö–æ–¥ –∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ...")
        st.rerun()  # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ

# –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞, –∫ –∫–æ—Ç–æ—Ä–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ø—É—Å–∫–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ cloud_id
def main_page():
    if 'key' not in st.session_state:
        st.session_state['key'] = 'value'
# Store the initial value of widgets in session state
    if "visibility" not in st.session_state:
        st.session_state.visibility = "visible"
        st.session_state.disabled = False
    st.title("–ú—ã –ø–æ–º–æ–∂–µ–º —É–ª—É—á—à–∏—Ç—å –í–∞—à –ø—Ä–æ–º–ø—Ç!")
    if "placeholder" not in st.session_state:
        st.session_state.placeholder = ''
    if "messages" not in st.session_state:
        st.session_state.messages = []
    prompt = st.text_input(
            "–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–º–ø—Ç üëá",
            label_visibility=st.session_state.visibility,
            disabled=st.session_state.disabled,
            placeholder=st.session_state.placeholder,
        )
    instr = st.text_area(
            "–ù–∞–ø–∏—à–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é üëá",
            label_visibility=st.session_state.visibility,
            disabled=st.session_state.disabled,
            placeholder=st.session_state.placeholder,
        )
    bad_answer = st.text_area(
            "–ù–∞–ø–∏—à–∏—Ç–µ –ø–ª–æ—Ö–æ–π –æ—Ç–≤–µ—Ç üëá",
            label_visibility=st.session_state.visibility,
            disabled=st.session_state.disabled,
            placeholder=st.session_state.placeholder,
        )
    if prompt:
        st.write("–í–∞—à –ø—Ä–æ–º–ø—Ç: ", prompt)
        st.write("–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã: ")
        st.write("–û—Ç–≤–µ—Ç –ø—Ä–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–º –ø—Ä–æ–º–ø—Ç–µ")
        client = OpenAI(api_key = os.environ.get("OPENAI_API_KEY"))
        st.session_state.messages.append({"role": "user", "content": prompt})
        st.chat_message("user").write(prompt)
        response = client.chat.completions.create(model="gpt-4o", messages=st.session_state.messages)
        msg = response.choices[0].message.content
        st.session_state.messages.append({"role": "assistant", "content": msg})
        st.chat_message("assistant").write(msg)

def main():
    #st.title("–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ cloud_id")
    
    #st.page_link("web.py", label="Home", icon="üè†")
    #st.page_link("pages/help_class.py", label="Page 1", icon="1Ô∏è‚É£")
    #st.page_link("pages/calibr.py", label="Page 2", icon="2Ô∏è‚É£")
    if 'CLOUD_ID' in os.environ:
        main_page()
    else:
        show_input_form()

if __name__ == "__main__":
    main()