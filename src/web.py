import streamlit as st
import os
from openai import OpenAI
from dotenv import load_dotenv
from first import recommendations
from second import calibrate_and_select_best, generate_recommendations
from yandexgpt import generate_answers
from pocketbase import PocketBase

load_dotenv()

showSidebarNavigation = True

client = PocketBase('https://ape.merkulov.ai')

def show_input_form():
    st.write("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à Cloud ID:")
    cloud_id = st.text_input("Cloud ID")

    if st.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å"):
        os.environ['CLOUD_ID'] = cloud_id
        st.success("Cloud ID —Å–æ—Ö—Ä–∞–Ω–µ–Ω. –ü–µ—Ä–µ—Ö–æ–¥ –∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ...")
        st.rerun()


def recommendation_page(prompt):
    if prompt:
        st.write("–í–∞—à –ø—Ä–æ–º–ø—Ç: ", prompt)
        rec = recommendations(prompt)
        stored_data = {
            "prompt": prompt,
            "recommendation": rec,
            "type": "recommendation"
        }
        result = client.collection("ape_logs").create(
            {
                "data": stored_data,
            }
        )

        st.write("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –ø—Ä–æ–º–ø—Ç–∞:")
        st.write(rec)


def improve_page(prompt):
    if prompt:
        recommendations = generate_recommendations(prompt)
        stored_data = {
            "prompt": prompt,
            "recommendations_prompts": recommendations,
            "best_recomendation": best_recommendation,
            "answers_yagpt": ans,
            "type": "improve"
        }
        result = client.collection("ape_logs").create(
            {
                "data": stored_data,
            }
        )
        st.header("–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã:")
        st.write(recommendations)
        ans = generate_answers(recommendations)
        n = len(ans)
        st.header("–û—Ç–≤–µ—Ç—ã, –≤—ã–¥–∞–≤–∞–µ–º—ã–µ –ø—Ä–∏ —ç—Ç–æ–º YandexGPT")
        for i in range(n):
            st.write(ans[i])
        best_recommendation = calibrate_and_select_best(recommendations, ans, n)
        st.header("–õ—É—á—à–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:")
        st.write(best_recommendation)


def main_page(selected_page):
    st.title("–ú—ã –ø–æ–º–æ–∂–µ–º —É–ª—É—á—à–∏—Ç—å –í–∞—à –ø—Ä–æ–º–ø—Ç!")

    if 'key' not in st.session_state:
        st.session_state['key'] = 'value'

    if "visibility" not in st.session_state:
        st.session_state.visibility = "visible"
        st.session_state.disabled = False

    if "placeholder" not in st.session_state:
        st.session_state.placeholder = ''
    if "messages" not in st.session_state:
        st.session_state.messages = []

    prompt = st.text_area(
        "–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–º–ø—Ç üëá",
        label_visibility=st.session_state.visibility,
        disabled=st.session_state.disabled,
        placeholder=st.session_state.placeholder,
    )
    if selected_page == "–£–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞":
        instr = st.text_area(
            "–ù–∞–ø–∏—à–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é üëá",
            label_visibility=st.session_state.visibility,
            disabled=st.session_state.disabled,
            placeholder=st.session_state.placeholder,
        )
        bad_answer = st.text_area(
            "–ù–∞–ø–∏—à–∏—Ç–µ –ø–ª–æ—Ö–æ–π –æ—Ç–≤–µ—Ç üëá",
            label_visibility=st.session_state.visibility,
            disabled=st.session_state.disabled,
            placeholder=st.session_state.placeholder,
        )

    if selected_page == "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏":
        recommendation_page(prompt)
    elif selected_page == "–£–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞":
        improve_page(prompt)


def sidebar_navigation():
    st.sidebar.title("–ù–∞–≤–∏–≥–∞—Ü–∏—è")
    selected_page = st.sidebar.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É:", ["–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", "–£–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞"])
    return selected_page


def main():
    if 'CLOUD_ID' in os.environ:
        if showSidebarNavigation:
            selected_page = sidebar_navigation()
            main_page(selected_page)
    else:
        show_input_form()


if __name__ == "__main__":
    main()
